{"id":"node_modules/gifencoder/lib/LZWEncoder.js","dependencies":[{"name":"C:\\Users\\dorin\\WebstormProjects\\war_puzzle\\package.json","includedInParent":true,"mtime":1646764308044},{"name":"C:\\Users\\dorin\\WebstormProjects\\war_puzzle\\node_modules\\gifencoder\\package.json","includedInParent":true,"mtime":1646764341232}],"generated":{"js":"/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n             0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n             0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n\n  var cur_accum, cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n  var maxcode;\n\n  // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n  var clear_flg = false;\n\n  // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n  var g_init_bits, ClearCode, EOFCode;\n\n  // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  }\n\n  // Clear out the hash table\n  // table clear for block compress\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  }\n\n  // Reset code table\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift;\n\n    // Set up the globals: g_init_bits - initial number of bits\n    g_init_bits = init_bits;\n\n    // Set up the necessary values\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n\n    ClearCode = 1 << (init_bits - 1);\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n\n    hshift = 0;\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n    hshift = 8 - hshift; // set hash code range bound\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = (c << hshift) ^ ent; // xor hashing\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) { // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n        if (i === 0) disp = 1;\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n      output(ent, outs);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    }\n\n    // Put out the final code.\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n    remaining = width * height; // reset navigation variables\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n    outs.writeByte(0); // write block terminator\n  }\n\n  // Flush the packet to disk, and reset the accumulator\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  }\n\n  // Return the next pixel from the image\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n\n    if (cur_bits > 0) cur_accum |= (code << cur_bits);\n    else cur_accum = code;\n\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out((cur_accum & 0xff), outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;\n        else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out((cur_accum & 0xff), outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\nmodule.exports = LZWEncoder;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/gifencoder/lib/LZWEncoder.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}}],"sources":{"node_modules/gifencoder/lib/LZWEncoder.js":"/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n             0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n             0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n\n  var cur_accum, cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n  var maxcode;\n\n  // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n  var clear_flg = false;\n\n  // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n  var g_init_bits, ClearCode, EOFCode;\n\n  // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  }\n\n  // Clear out the hash table\n  // table clear for block compress\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  }\n\n  // Reset code table\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift;\n\n    // Set up the globals: g_init_bits - initial number of bits\n    g_init_bits = init_bits;\n\n    // Set up the necessary values\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n\n    ClearCode = 1 << (init_bits - 1);\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n\n    hshift = 0;\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n    hshift = 8 - hshift; // set hash code range bound\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = (c << hshift) ^ ent; // xor hashing\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) { // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n        if (i === 0) disp = 1;\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n      output(ent, outs);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    }\n\n    // Put out the final code.\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n    remaining = width * height; // reset navigation variables\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n    outs.writeByte(0); // write block terminator\n  }\n\n  // Flush the packet to disk, and reset the accumulator\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  }\n\n  // Return the next pixel from the image\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n\n    if (cur_bits > 0) cur_accum |= (code << cur_bits);\n    else cur_accum = code;\n\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out((cur_accum & 0xff), outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;\n        else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out((cur_accum & 0xff), outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\nmodule.exports = LZWEncoder;\n"},"lineCount":210}},"error":null,"hash":"8dccbf65663a84ff9aa9afec22cb29f6","cacheData":{"env":{}}}